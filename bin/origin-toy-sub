#!/usr/bin/env python

import sys
import os.path
import ConfigParser
import pprint
import logging
import time

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# create console handler and set level to debug
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)

# create formatter
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# add formatter to ch
ch.setFormatter(formatter)

# add ch to logger
logger.addHandler(ch)

# first find ourself
fullBinPath  = os.path.abspath(os.getcwd() + "/" + sys.argv[0])
fullBasePath = os.path.dirname(os.path.dirname(fullBinPath))
fullLibPath  = os.path.join(fullBasePath, "lib")
fullCfgPath  = os.path.join(fullBasePath, "config")
sys.path.append(fullLibPath)

from origin.client.origin_subscriber import Subscriber

if len(sys.argv) > 1:
  if sys.argv[1] == 'test':
    configfile = os.path.join(fullCfgPath, "origin-server-test.cfg")
  else:
    configfile = os.path.join(fullCfgPath, sys.argv[1])
else:
  configfile = os.path.join(fullCfgPath, "origin-server.cfg")

config = ConfigParser.ConfigParser()
config.read(configfile)

sub = Subscriber(config, logger)

logger.info("streams")
print('')
pprint.pprint(sub.known_streams.keys())

stream = raw_input("stream to subscribe to: ")

if not stream in sub.known_streams:
    print("stream not recognized")
    sub.close()
    sys.exit(1)

print("subscribing to stream: %s" % (stream,) )
sub.subscribe(stream)

try:
    while True:
        time.sleep(0.5)
except KeyboardInterrupt:
    sub.close()
    logger.info('closing')
