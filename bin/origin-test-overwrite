#!/usr/bin/env python

import sys
import os
fullBinPath=os.path.abspath(os.getcwd() + "/" + sys.argv[0])
fullLibPath=os.path.abspath(os.path.dirname(os.path.dirname(fullBinPath))+"/lib")
sys.path.append(fullLibPath)
import time

import random
import calendar
import time
import sys

import origin
if len(sys.argv) > 1:
  configBundle = sys.argv[1]
  origin.configure(configBundle)
else:
  origin.configure("site")


from origin.client import monitoring_record
from origin.client import server
from origin.client import server_connection
from origin import current_time, timestamp

# just a proxy for actually doing something useful
def makeTempMeasurement():
    return random.random()

# something that represents the connection to the server
# might need arguments.... idk
serv = server()


# alert the server that we are going to be sending this type of data
connection = serv.registerStream(
    stream="overwriteTest",
    records={
        "toy1":"float",
        "toy2":"float",
        })

# perhaps print some useful message. Perhaps try to reconnect....
# print "problem establishing connection to server..."
# sys.exit(1)


# This might need to be more complicated, but you get the gist. Keep sending records forever    
time.sleep(2)
for i in range(3):
    print "sending...."
    t1,t2 = (makeTempMeasurement(), makeTempMeasurement())
    data = { timestamp: current_time(origin.config), "toy1": t1, "toy2": t2 }
    connection.send(**data)
    print("toy1: {}\ntoy2: {}".format(t1,t2))
    time.sleep(1)
connection.close()
time.sleep(2)

# make a different stream with the same name
connection = serv.registerStream(
    stream="overwriteTest",
    records={
        "toy1":"float",
        "toy2":"float",
        "toy3":"float",
        })
for i in range(3):
    print "sending...."
    t1,t2 = (makeTempMeasurement(), makeTempMeasurement())
    data = { 
            timestamp: current_time(origin.config), 
            "toy1": t1, 
            "toy2": t2,
            "toy3": t2 
    }
    connection.send(**data)
    print("toy1: {}\ntoy2: {}".format(t1,t2))
    time.sleep(1)
connection.close()
