#!/usr/bin/env python

import sys
import os
fullBinPath=os.path.abspath(os.getcwd() + "/" + sys.argv[0])
fullLibPath=os.path.abspath(os.path.dirname(os.path.dirname(fullBinPath))+"/lib")
sys.path.append(fullLibPath)
import time

import random
import calendar
import time
import sys
import ctypes
import struct
import json # temp

import origin

if len(sys.argv) > 1:
  configBundle = sys.argv[1]
  origin.configure(configBundle)
else:
  origin.configure("site")


from origin.client import monitoring_record
from origin.client import server
from origin.client import server_connection
from origin.client import random_data
from origin.client import formatStreamDeclaration
from origin import data_types, current_time

# something that represents the connection to the server
# might need arguments.... idk
serv = server()

streamName = "toy_dtype_test1"
records={
    "toy_int":"int",
    "toy_uint":"uint",
    "toy_int64":"int64",
    "toy_uint64":"uint64",
    "toy_int16":"int16",
    "toy_uint16":"uint16",
    "toy_int8":"int8",
    "toy_uint8":"uint8",
    "toy_float":"float",
    "toy_double":"double",
}
numEntries = len(records)

# alert the server that we are going to be sending this type of data
connection = serv.registerStream(
    stream=streamName,
    records=records
)

# perhaps print some useful message. Perhaps try to reconnect....
# print "problem establishing connection to server..."
# sys.exit(1)

header = json.dumps((streamName,))
print header

try:
    tsType = origin.config["timestamp_type"]
except KeyError:
    tsType = "uint"

# This might need to be more complicated, but you get the gist. Keep sending records forever    
time.sleep(2)

while True:
    print "sending...."
    data = {}
    for entry in records:
        data[entry] = random_data( records[entry] )
    print(data)
    connection.socket.send(json.dumps([streamName,current_time(origin.config),data]))
    time.sleep(5)
